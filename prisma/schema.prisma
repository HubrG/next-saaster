// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// SECTION: Next AUTH

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  EDITOR
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String?            @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  date               DateTime?          @default(now())
  customerId         String?
  createdAt          DateTime?          @default(now())
  updatedAt          DateTime?          @updatedAt
  planId             String?
  organizationId     String?
  role               UserRole           @default(USER)
  organization       Organization?      @relation("OrganizationMembers", fields: [organizationId], references: [id])
  accounts           Account[]
  sessions           Session[]
  oneTimePayments    OneTimePayment[]
  contacts           ResendContact[]
  usage              UserUsage[]
  subscriptions      UserSubscription[]
  Organization       Organization[]
}

model Organization {
  id                      String                   @id @default(cuid())
  name                    String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  ownerId                 String
  organizationInvitations OrganizationInvitation[]
  owner                   User                     @relation(fields: [ownerId], references: [id])
  members                 User[]                   @relation("OrganizationMembers")
}

model OrganizationInvitation {
  id             String       @id @default(cuid())
  email          String
  organizationId String
  isAccepted     Boolean      @default(false)
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Subscription {
  id                   String                @id @unique
  priceId              String?
  status               SubscriptionStatus?   @default(unpaid)
  startDate            String?
  endDate              String?
  stripeCustomerId     String?
  allDatas             Json?
  nextPaymentAttempt   Int?
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
  users                UserSubscription[]
  SubscriptionPayments SubscriptionPayment[]
  price                StripePrice?          @relation(fields: [priceId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  userId          String
  subscriptionId  String
  creditRemaining Int?         @default(0)
  isActive        Boolean      @default(false)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@id([userId, subscriptionId])
}

model UserUsage {
  id        String    @id @default(cuid())
  userId    String
  quantity  Int       @default(0)
  featureId String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  feature   Feature?  @relation(fields: [featureId], references: [id], onDelete: Cascade)
}

model appSettings {
  id                String    @id @default(cuid())
  name              String?   @default("Fairysaas")
  baseline          String?   @default("Just develop your best feature, the rest is already done and well done.")
  description       String?   @default("Fairysaas is a SaaS starter kit based on NextJS that allows you to develop your best feature, the rest is already done and well done. It is a full-stack solution that includes a modern frontend, a scalable backend, and a secure infrastructure. It is designed to help you save time and money, and to focus on what really matters: your business. SaaSeed is built with the latest technologies and best practices, and it is fully customizable and extensible.")
  theme             String?   @default("purple")
  roundedCorner     Float?    @default(10)
  defaultDarkMode   Boolean?  @default(true)
  activeTopLoader   Boolean?  @default(true)
  activeDarkMode    Boolean?  @default(true)
  activeCtaOnNavbar Boolean?  @default(true)
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
}

// SECTION: Pricing

model SubscriptionPayment {
  id                    String        @id @default(cuid())
  subscriptionId        String?
  stripePaymentIntentId String?
  amount                Int?
  currency              String?
  status                String?
  createdAt             DateTime?     @default(now())
  updatedAt             DateTime?     @updatedAt
  subscription          Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model OneTimePayment {
  id                    String       @id @default(cuid())
  userId                String
  stripePaymentIntentId String
  stripeCustomerId      String?
  amount                Int
  currency              String
  priceId               String?
  status                String
  createdAt             DateTime?    @default(now())
  updatedAt             DateTime?    @updatedAt
  user                  User         @relation(fields: [userId], references: [id])
  price                 StripePrice? @relation(fields: [priceId], references: [id], onDelete: Cascade)
}

// SECTION END: Pricing

model SaasSettings {
  id                              String    @id @default(cuid())
  saasType                        SaasTypes @default(MRR_SIMPLE)
  activeYearlyPlans               Boolean?  @default(true)
  activeMonthlyPlans              Boolean?  @default(true)
  activeCreditSystem              Boolean?  @default(true)
  activeRefillCredit              Boolean?  @default(true)
  displayFeaturesByCategory       Boolean?  @default(false)
  activeFeatureComparison         Boolean?  @default(true)
  activeFeatureAdvancedComparison Boolean?  @default(false)
  currency                        String?   @default("usd")
  tax                             Float?    @default(0)
  creditName                      String?   @default("Credit")
  createdAt                       DateTime? @default(now())
  updatedAt                       DateTime? @updatedAt
}

model Plan {
  id                   String               @id @default(cuid())
  name                 String?              @default("New plan")
  description          String?              @default("New plan description")
  isCustom             Boolean?             @default(false) // Custom plan, contact us for...
  isPopular            Boolean?             @default(false) // Display popular plan on top
  isRecommended        Boolean?             @default(false) // Display recommended plan on top
  isTrial              Boolean?             @default(false) // Trial plan
  isFree               Boolean?             @default(false) // Free plan
  trialDays            Int?                 @default(0) // Trial days
  monthlyPrice         Float?               @default(0) // Monthly price
  yearlyPrice          Float?               @default(0) // Yearly price
  oncePrice            Float?               @default(0) // Once price
  creditAllouedByMonth Int?                 @default(0) // Monthly credit
  stripeId             String?              @unique
  stripeYearlyPriceId  String?
  stripeMonthlyPriceId String?
  unitLabel            String?              @default("")
  meteredUnit          Int?                 @default(0)
  meteredMode          MeteredMode          @default(PACKAGE)
  meteredBillingPeriod MeteredBillingPeriod @default(WEEK)
  saasType             SaasTypes            @default(MRR_SIMPLE)
  active               Boolean?             @default(false)
  position             Int?                 @default(9999)
  deleted              Boolean?             @default(false)
  createdAt            DateTime?            @default(now())
  deletedAt            DateTime?            @default(now())
  updatedAt            DateTime?            @updatedAt
  coupons              StripePlanCoupon[]
  StripeProduct        StripeProduct[]
  Features             PlanToFeature[]
}

model Feature {
  id                  String           @id @default(cuid())
  name                String?          @default("")
  alias               String?          @unique
  active              Boolean?         @default(false)
  description         String?          @default("")
  onlyOnSelectedPlans Boolean?         @default(false)
  displayOnCard       Boolean?         @default(false)
  categoryId          String?
  position            Int?             @default(9999)
  positionCategory    Int?             @default(9999)
  deleted             Boolean?         @default(false)
  deletedAt           DateTime?        @default(now())
  createdAt           DateTime?        @default(now())
  updatedAt           DateTime?        @updatedAt
  category            FeatureCategory? @relation(fields: [categoryId], references: [id])
  Plans               PlanToFeature[]
  userUsage           UserUsage[]
}

model PlanToFeature {
  id                   String   @id @default(cuid())
  creditCost           Int?     @default(0)
  creditAllouedByMonth Int?     @default(0)
  active               Boolean? @default(false)
  planId               String
  featureId            String
  plan                 Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  feature              Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([planId, featureId])
}

model FeatureCategory {
  id          String    @id @default(cuid())
  name        String?   @unique
  description String?   @default("Features category description")
  position    Int?      @default(9999)
  deleted     Boolean?  @default(false)
  deletedAt   DateTime? @default(now())
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  Features    Feature[]
}

// SECTION Stripe Products

model StripeProduct {
  id                   String        @id
  name                 String
  active               Boolean
  description          String?
  default_price        String?
  metadata             Json
  unit_label           String?
  statement_descriptor String?
  createdAt            DateTime?     @default(now())
  updatedAt            DateTime?     @updatedAt
  PlanId               String?       @unique
  prices               StripePrice[]
  PlanRelation         Plan?         @relation(fields: [PlanId], references: [id], onDelete: Cascade)
}

model StripePrice {
  id                           String           @id @default(cuid())
  active                       Boolean
  billing_scheme               String?
  currency                     String
  custom_unit_amount           Json?
  custom_unit_amount_maximum   Float?
  custom_unit_amount_minimum   Float?
  custom_unit_amount_preset    Float?
  lookup_key                   String?
  metadata                     Json
  nickname                     String?
  product                      String
  recurring                    Json?
  recurring_interval           String?
  recurring_interval_count     Int?
  recurring_aggregate_usage    Int?
  recurring_trial_period_days  Int?
  recurring_usage_type         String?
  transform_quantity           Json?
  transform_quantity_divide_by Int?
  transform_quantity_round     String?
  tiers_mode                   String?
  tiers                        Json?
  aggregate_usage              String?
  type                         String
  unit_amount                  Int
  unit_amount_decimal          String?
  createdAt                    DateTime?        @default(now())
  updatedAt                    DateTime?        @updatedAt
  productRelation              StripeProduct?   @relation(fields: [product], references: [id], onDelete: Cascade)
  subscriptions                Subscription[]
  oneTimePayments              OneTimePayment[]
}

model StripeCoupon {
  id               String             @id
  amountOff        Float?
  currency         String?
  duration         String
  durationInMonths Int?
  maxRedemptions   Int?
  metadata         Json
  name             String?
  percentOff       Float?
  redeemBy         Int?
  timesRedeemed    Int
  valid            Boolean
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  Plan             StripePlanCoupon[]
}

model StripePlanCoupon {
  id         String       @id @default(cuid())
  PlanId     String
  couponId   String
  recurrence String?
  Plan       Plan         @relation(fields: [PlanId], references: [id], onDelete: Cascade)
  coupon     StripeCoupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([PlanId, couponId, recurrence])
}

enum SaasTypes {
  // One-time payments
  PAY_ONCE
  // Alias: PO
  // NOTE -> Single payment for the purchase of products or services.

  // Recurring subscriptions
  MRR_SIMPLE
  // Alias: MRR
  // NOTE -> Periodic billing for ongoing access to a product or service.

  // Metered usage
  METERED_USAGE
  // Alias: MU
  // NOTE -> Billing based on actual quantity consumed or services used.

  // Per seat or per license pricing
  PER_SEAT
  // Alias: PS
  // NOTE -> Billing based on the number of users accessing the service.

  CUSTOM_PRICE
  // Alias: CP
  // NOTE -> Customized pricing for more specific needs.

  CUSTOM
  // Alias: CS
  // NOTE -> Customized billing for more specific needs.
}

enum MeteredMode {
  PACKAGE
  UNIT
}

enum MeteredBillingPeriod {
  DAY
  WEEK
  MONTH
  YEAR
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  paused
  past_due
  canceled
  unpaid
}

// SECTION : Resend (mailer)
model ResendAudience {
  id        String          @id
  name      String          @unique
  contacts  ResendContact[] // Relation one-to-many avec ResendContact
  createdAt DateTime?       @default(now())
  updatedAt DateTime?       @updatedAt
}

model ResendContact {
  id           String          @id
  email        String
  firstName    String
  lastName     String?
  unsubscribed Boolean?        @default(false)
  audienceId   String?
  audience     ResendAudience? @relation(fields: [audienceId], references: [id])
  createdAt    DateTime?       @default(now())
  updatedAt    DateTime?       @updatedAt
  userId       String?
  user         User?           @relation(fields: [userId], references: [id]) // Correctement configuré
}
