// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// SECTION: Next AUTH

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  EDITOR
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  date           DateTime?      @default(now())
  role           UserRole       @default(USER)
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
  transactions   Transaction[]
  subscriptions  Subscription[]
}

// SECTION -> Reste du schema

model appSettings {
  id                String    @id @default(cuid())
  name              String?   @default("NextSaaster")
  baseline          String?   @default("Begin a SaaS project with Next.js, Prisma, and Stripe")
  description       String?   @default("Begin a SaaS project with Next.js, Prisma, and Stripe")
  theme             String?   @default("nanny")
  roundedCorner     Float?    @default(5)
  defaultDarkMode   Boolean?  @default(true)
  activeTopLoader   Boolean?  @default(true)
  activeDarkMode    Boolean?  @default(true)
  activeCtaOnNavbar Boolean?  @default(true)
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
}

// SECTION: Pricing

model Transaction {
  id          String    @id @default(cuid())
  userId      String
  sessionId   String
  amount      Int?
  currency    String?
  invoice     String?
  description String?
  status      String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model Subscription {
  id          String    @id @default(cuid())
  userId      String
  sessionId   String
  amount      Int?
  pricingId   String?
  currency    String?   @default("usd")
  description String?
  status      String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  MRRSPlan    MRRSPlan? @relation(fields: [pricingId], references: [id])
}

// SECTION END: Pricing

enum SaasTypes {
  CREDIT
  // Alias : CREDIT
  // Ce modèle, basé sur l'achat de crédits, est souvent utilisé dans les SaaS où les clients paient pour la consommation de ressources ou
  // l'accès à des fonctionnalités spécifiques. 
  // Cela offre une grande flexibilité et permet aux utilisateurs de payer uniquement pour ce qu'ils consomment.
  // NOTE -> NON PRIORITAIRE —> UNIQUE
  // Pour une prochiane MAJ. 
  // L'achat unique pour l'accès à une fonctionnalité spécifique est moins courant dans les SaaS traditionnels,
  // mais il peut être pertinent pour des services spécifiques ou des extensions/add-ons.
  MRR_SIMPLE
  // Alias : MRRS
  // Ce modèle est basé sur des plans d'abonnement mensuels ou annuels.
  // Offrir différents plans à différents prix permet de cibler divers segments de clients.
  PAY_ONCE
  // Alias : PO
  // Ce modèle est une variation plus avancée du MRR, où chaque plan inclut non seulement des fonctionnalités supplémentaires
  // mais aussi des limites de crédits pour chaque fonctionnalité. 
  // Cela convient aux SaaS qui offrent des services modulaires ou une utilisation basée sur des quotas.
}

model SaasSettings {
  id                              String    @id @default(cuid())
  saasType                        SaasTypes @default(MRR_SIMPLE)
  activeYearlyPlans               Boolean?  @default(true)
  activeMonthlyPlans              Boolean?  @default(true)
  activeCreditSystem              Boolean?  @default(true)
  activeRefillCredit              Boolean?  @default(true)
  displayFeaturesByCategory       Boolean?  @default(false)
  activeFeatureComparison         Boolean?  @default(false)
  activeFeatureAdvancedComparison Boolean?  @default(false)
  currency                        String?   @default("usd")
  tax                             Float?    @default(0)
  creditName                      String?   @default("Credit name")
  createdAt                       DateTime? @default(now())
  updatedAt                       DateTime? @updatedAt
}

model MRRSPlan {
  id                   String              @id @default(cuid())
  name                 String?             @default("Plan name")
  description          String?             @default("Plan description")
  isCustom             Boolean?            @default(false) // Custom plan, contact us for...
  isPopular            Boolean?            @default(false) // Display popular plan on top
  isRecommended        Boolean?            @default(false) // Display recommended plan on top
  isTrial              Boolean?            @default(false) // Trial plan
  isFree               Boolean?            @default(false) // Free plan
  trialDays            Int?                @default(0) // Trial days
  isMonthly            Boolean?            @default(false) // Monthly plan
  monthlyPrice         Float?              @default(0) // Monthly price
  isYearly             Boolean?            @default(false) // Yearly plan
  yearlyPrice          Float?              @default(0) // Yearly price
  isCredit             Boolean?            @default(false) // Credit plan
  creditAllouedByMonth Int?                @default(0) // Monthly credit
  stripeId             String?
  stripeYearlyPriceId  String?
  stripeMonthlyPriceId String?
  stripeFreePriceId    String?
  saasType             SaasTypes           @default(MRR_SIMPLE) // Saas type
  active               Boolean?            @default(false) // Active plan
  position             Int?                @default(9999) // Position in list
  deleted              Boolean?            @default(false) // Deleted plan
  createdAt            DateTime?           @default(now())
  deletedAt            DateTime?           @default(now())
  updatedAt            DateTime?           @updatedAt
  MRRSFeatures         MRRSPlanToFeature[]
  Subscription         Subscription[]
}

model MRRSFeature {
  id                  String               @id @default(cuid())
  name                String?              @default("")
  alias               String?              @unique
  description         String?              @default("")
  onlyOnSelectedPlans Boolean?             @default(false)
  categoryId          String?
  position            Int?                 @default(9999)
  positionCategory    Int?                 @default(9999)
  deleted             Boolean?             @default(false)
  deletedAt           DateTime?            @default(now())
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  category            MRRSFeatureCategory? @relation(fields: [categoryId], references: [id])
  MRRSPlans           MRRSPlanToFeature[]
}

model MRRSPlanToFeature {
  id                   String      @id @default(cuid())
  creditCost           Int?        @default(0)
  creditAllouedByMonth Int?        @default(0)
  active               Boolean?    @default(false)
  planId               String
  featureId            String
  plan                 MRRSPlan    @relation(fields: [planId], references: [id], onDelete: Cascade)
  feature              MRRSFeature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([planId, featureId])
}

model MRRSFeatureCategory {
  id           String        @id @default(cuid())
  name         String?       @unique
  description  String?       @default("Features category description")
  position     Int?          @default(9999)
  deleted      Boolean?      @default(false)
  deletedAt    DateTime?     @default(now())
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  MRRSFeatures MRRSFeature[]
}
