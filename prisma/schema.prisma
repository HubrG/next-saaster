// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// SECTION: Next AUTH

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  EDITOR
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  date             DateTime?         @default(now())
  role             UserRole          @default(USER)
  customerId       String?
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
  userSettings     UserSettings[]
  accounts         Account[]
  sessions         Session[]
  transactions     Transaction[]
  subscriptions    Subscription[]
  MRRSUserFeatures MRRSUserFeature[]
  contacts         ResendContact[]
}

model UserSettings {
  id               String    @id @default(cuid())
  userId           String    @unique
  theme            String?   @default("nanny")
  language         String?   @default("en")
  stripeCustomerId String?
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  user             User      @relation(fields: [userId], references: [id])
}

// SECTION -> Reste du schema

model appSettings {
  id                String    @id @default(cuid())
  name              String?   @default("NextSaaster")
  baseline          String?   @default("Begin a SaaS project with Next.js, Prisma, and Stripe")
  description       String?   @default("Begin a SaaS project with Next.js, Prisma, and Stripe")
  theme             String?   @default("nanny")
  roundedCorner     Float?    @default(5)
  defaultDarkMode   Boolean?  @default(true)
  activeTopLoader   Boolean?  @default(true)
  activeDarkMode    Boolean?  @default(true)
  activeCtaOnNavbar Boolean?  @default(true)
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
}

// SECTION: Pricing

model Transaction {
  id               String        @id @default(cuid())
  userId           String
  sessionId        String
  amount           Int?
  currency         String?
  invoice          String?
  description      String?
  status           String?
  StripePaymentId  String?
  stripeCustomerId String?
  subscriptionId   String?
  createdAt        DateTime?     @default(now())
  updatedAt        DateTime?     @updatedAt
  user             User          @relation(fields: [userId], references: [id])
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
}

model Subscription {
  id               String        @id @default(cuid())
  userId           String
  sessionId        String
  amount           Int?
  currency         String?       @default("usd")
  planId           String?
  stripeProductId  String?
  stripePriceId    String?
  stripeCustomerId String?
  isMonthly        Boolean?      @default(false)
  isYearly         Boolean?      @default(false)
  isFree           Boolean?      @default(false)
  nextPayment      DateTime?
  canceled         Boolean?      @default(false)
  createdAt        DateTime?     @default(now())
  updatedAt        DateTime?     @updatedAt
  transactions     Transaction[]
  user             User          @relation(fields: [userId], references: [id])
  MRRSPlan         MRRSPlan?     @relation(fields: [planId], references: [id])
}

// SECTION END: Pricing

model SaasSettings {
  id                              String    @id @default(cuid())
  saasType                        SaasTypes @default(MRR_SIMPLE)
  activeYearlyPlans               Boolean?  @default(true)
  activeMonthlyPlans              Boolean?  @default(true)
  activeCreditSystem              Boolean?  @default(true)
  activeRefillCredit              Boolean?  @default(true)
  displayFeaturesByCategory       Boolean?  @default(false)
  activeFeatureComparison         Boolean?  @default(false)
  activeFeatureAdvancedComparison Boolean?  @default(false)
  currency                        String?   @default("usd")
  tax                             Float?    @default(0)
  creditName                      String?   @default("Credit name")
  createdAt                       DateTime? @default(now())
  updatedAt                       DateTime? @updatedAt
}

model MRRSPlan {
  id                   String              @id @default(cuid())
  name                 String?             @default("Plan name")
  description          String?             @default("Plan description")
  isCustom             Boolean?            @default(false) // Custom plan, contact us for...
  isPopular            Boolean?            @default(false) // Display popular plan on top
  isRecommended        Boolean?            @default(false) // Display recommended plan on top
  isTrial              Boolean?            @default(false) // Trial plan
  isFree               Boolean?            @default(false) // Free plan
  trialDays            Int?                @default(0) // Trial days
  isMonthly            Boolean?            @default(false) // Monthly plan
  monthlyPrice         Float?              @default(0) // Monthly price
  isYearly             Boolean?            @default(false) // Yearly plan
  yearlyPrice          Float?              @default(0) // Yearly price
  oncePrice            Float?              @default(0) // Once price
  isCredit             Boolean?            @default(false) // Credit plan
  creditAllouedByMonth Int?                @default(0) // Monthly credit
  stripeId             String?             @unique
  stripeYearlyPriceId  String?
  stripeMonthlyPriceId String?
  stripeFreePriceId    String?
  saasType             SaasTypes           @default(MRR_SIMPLE)
  active               Boolean?            @default(false)
  position             Int?                @default(9999)
  deleted              Boolean?            @default(false)
  createdAt            DateTime?           @default(now())
  deletedAt            DateTime?           @default(now())
  updatedAt            DateTime?           @updatedAt
  coupons              StripePlanCoupon[]
  StripeProduct        StripeProduct[]
  MRRSFeatures         MRRSPlanToFeature[]
  Subscription         Subscription[]
  MRRSUserFeatures     MRRSUserFeature[]
}

model MRRSFeature {
  id                  String               @id @default(cuid())
  name                String?              @default("")
  alias               String?              @unique
  description         String?              @default("")
  onlyOnSelectedPlans Boolean?             @default(false)
  categoryId          String?
  position            Int?                 @default(9999)
  positionCategory    Int?                 @default(9999)
  deleted             Boolean?             @default(false)
  deletedAt           DateTime?            @default(now())
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  category            MRRSFeatureCategory? @relation(fields: [categoryId], references: [id])
  MRRSPlans           MRRSPlanToFeature[]
  MRRSUserFeatures    MRRSUserFeature[]
}

model MRRSPlanToFeature {
  id                   String      @id @default(cuid())
  creditCost           Int?        @default(0)
  creditAllouedByMonth Int?        @default(0)
  active               Boolean?    @default(false)
  planId               String
  featureId            String
  plan                 MRRSPlan    @relation(fields: [planId], references: [id], onDelete: Cascade)
  feature              MRRSFeature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([planId, featureId])
}

model MRRSFeatureCategory {
  id           String        @id @default(cuid())
  name         String?       @unique
  description  String?       @default("Features category description")
  position     Int?          @default(9999)
  deleted      Boolean?      @default(false)
  deletedAt    DateTime?     @default(now())
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  MRRSFeatures MRRSFeature[]
}

model MRRSUserFeature {
  id              String      @id @default(cuid())
  userId          String
  featureId       String
  planId          String
  active          Boolean?    @default(false)
  creditRemaining Int?        @default(0)
  createdAt       DateTime?   @default(now())
  updatedAt       DateTime?   @updatedAt
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  feature         MRRSFeature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  plan            MRRSPlan    @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([userId, featureId, planId])
}

// SECTION Stripe Products

model StripeProduct {
  id                   String        @id
  name                 String
  active               Boolean
  description          String?
  default_price        String?
  metadata             Json
  unit_label           String?
  statement_descriptor String?
  createdAt            DateTime?     @default(now())
  updatedAt            DateTime?     @updatedAt
  MRRSPlanId           String?       @unique
  prices               StripePrice[]
  MRRSPlanRelation     MRRSPlan?     @relation(fields: [MRRSPlanId], references: [id], onDelete: Cascade)
}

model StripePrice {
  id                           String         @id @default(cuid())
  active                       Boolean
  billing_scheme               String?
  currency                     String
  custom_unit_amount           String?
  lookup_key                   String?
  metadata                     Json
  nickname                     String?
  product                      String
  recurring                    Json?
  recurring_interval           String?
  recurring_interval_count     Int?
  recurring_aggregate_usage    Int?
  recurring_trial_period_days  Int?
  recurring_usage_type         String?
  transform_quantity           Json?
  transform_quantity_divide_by Int?
  transform_quantity_round     String?
  tiers_mode                   String?
  type                         String
  unit_amount                  Int
  unit_amount_decimal          String
  productRelation              StripeProduct? @relation(fields: [product], references: [id], onDelete: Cascade)
}

model StripeCoupon {
  id               String             @id
  object           String
  amountOff        Int?
  created          Int
  currency         String?
  duration         String
  durationInMonths Int?
  livemode         Boolean
  maxRedemptions   Int?
  metadata         Json
  name             String?
  percentOff       Float
  redeemBy         Int?
  timesRedeemed    Int
  valid            Boolean
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  MRRSPlan         StripePlanCoupon[]
}

model StripePlanCoupon {
  id         String       @id @default(cuid())
  MRRSPlanId String
  couponId   String
  recurrence String?
  MRRSPlan   MRRSPlan     @relation(fields: [MRRSPlanId], references: [id], onDelete: Cascade)
  coupon     StripeCoupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([MRRSPlanId, couponId, recurrence])
}

enum SaasTypes {
  // Paiements uniques
  PAY_ONCE
  // Alias : PO
  // NOTE -> Paiement unique pour l'achat de produits ou services.

  // Abonnements récurrents
  MRR_SIMPLE
  // Alias : MRRS
  // NOTE -> Facturation périodique pour l'accès continu à un produit ou service.

  // Utilisation mesurée (Metered Billing)
  METERED_USAGE
  // Alias : MU
  // NOTE -> Facturation basée sur la quantité réelle consommée ou services utilisés.

  // Prix par siège ou par licence
  PER_SEAT
  // Alias : PS
  // NOTE -> Facturation basée sur le nombre d'utilisateurs ayant accès au service.
}

// SECTION : Resend (mailer)
model ResendAudience {
  id        String          @id
  name      String          @unique
  contacts  ResendContact[] // Relation one-to-many avec ResendContact
  createdAt DateTime?       @default(now())
  updatedAt DateTime?       @updatedAt
}

model ResendContact {
  id           String          @id
  email        String
  firstName    String
  lastName     String?
  unsubscribed Boolean?        @default(false)
  audienceId   String?
  audience     ResendAudience? @relation(fields: [audienceId], references: [id])
  createdAt    DateTime?       @default(now())
  updatedAt    DateTime?       @updatedAt
  userId       String?
  user         User?           @relation(fields: [userId], references: [id]) // Correctement configuré
}
